<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ggluo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ggluo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-28T10:01:00+00:00</updated><id>https://ggluo.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Learn C++ 3: Disallow C++ class copy and assignment</title><link href="https://ggluo.github.io/2023/03/02/learn-c-3.html" rel="alternate" type="text/html" title="Learn C++ 3: Disallow C++ class copy and assignment"/><published>2023-03-02T12:31:00+00:00</published><updated>2023-03-02T12:31:00+00:00</updated><id>https://ggluo.github.io/2023/03/02/learn-c-3</id><content type="html" xml:base="https://ggluo.github.io/2023/03/02/learn-c-3.html"><![CDATA[<p>I came across the two lines below. At the beginning, I thought they are declaration for a customized destructor. It turned out that I’m wrong after a discussion with my colleague.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">net_infer</span><span class="p">(</span><span class="k">const</span> <span class="n">net_infer</span><span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
<span class="n">net_infer</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">net_infer</span><span class="o">&amp;</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
</code></pre></div></div> <h4 id="1-disallow-copy">1. Disallow copy</h4> <p>a. <strong>net_infer</strong>: This is the name of the class.</p> <p>b. <strong>const net_infer&amp;</strong>: This is a reference to a const object of type <strong>net_infer</strong>. It’s the parameter type of the copy constructor.</p> <p>c. <strong>= delete</strong>: This part of the declaration explicitly deletes the copy constructor. It means that attempts to create copies of <strong>net_infer</strong> objects using the copy constructor will result in a compilation error.</p> <h4 id="2-disallow-assignment">2. Disallow assignment</h4> <p>a. <strong>net_infer&amp;</strong>: This specifies the return type of the copy assignment operator. It returns a reference to a net_infer object.</p> <p>b. <strong>operator=</strong>: This is the name of the copy assignment operator.</p> <p>c. <strong>(const net_infer&amp;)</strong>: This specifies the parameter of the copy assignment operator, which is a reference to a const object of type net_infer. This parameter represents the object that is being assigned from.</p> <p>d. <strong>= delete</strong>: This part of the declaration explicitly deletes the copy assignment operator. It means that attempts to assign one net_infer object to another using the copy assignment operator will result in a compilation error.</p> <p>By deleting the copy assignment operator or the copy constructor, the class net_infer effectively disallows assignment operations and copy between its instances. This is useful in cases where copying or assigning instances of the class would lead to undesirable behavior, such as resource leaks or invalid state changes.</p>]]></content><author><name></name></author><category term="c++"/><summary type="html"><![CDATA[I came across the two lines below. At the beginning, I thought they are declaration for a customized destructor. It turned out that I’m wrong after a discussion with my colleague.]]></summary></entry><entry><title type="html">Learn C++ 2: Integrating TensorRT Libraries into CMake Projects</title><link href="https://ggluo.github.io/2023/02/08/learn-c-2.html" rel="alternate" type="text/html" title="Learn C++ 2: Integrating TensorRT Libraries into CMake Projects"/><published>2023-02-08T17:31:00+00:00</published><updated>2023-02-08T17:31:00+00:00</updated><id>https://ggluo.github.io/2023/02/08/learn-c-2</id><content type="html" xml:base="https://ggluo.github.io/2023/02/08/learn-c-2.html"><![CDATA[<p>I downloaded the tar file for <a href="https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html#installing-tar"><code class="language-plaintext highlighter-rouge">TensorRT</code></a> local installation and unpack it into a local folder. I want to use the dynamic libraries in it such as <code class="language-plaintext highlighter-rouge">libnvinfer.so</code> when compiling my project with CMake. How shoud I configurate it in the CMakeLists.txt.</p> <ol> <li>Locate the directory into which you unpack TensorRT tar file. This directory contains the header files (‘*.h’) and libraries (‘*.so’). <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set(TENSORRT_DIR /path/to/tensorrt)
</code></pre></div> </div> </li> <li>Use <code class="language-plaintext highlighter-rouge">find_library</code> command to find (‘*.so’) under directory <code class="language-plaintext highlighter-rouge">lib</code> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find_library(NVINFER_LIB libnvinfer.so PATHS ${TENSORRT_DIR}/lib)
</code></pre></div> </div> </li> <li>Use <code class="language-plaintext highlighter-rouge">include_directories</code> command to include header files (‘*.h’) under directory <code class="language-plaintext highlighter-rouge">include</code> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include_directories(${TENSORRT_DIR}/include)
</code></pre></div> </div> </li> <li>Use <code class="language-plaintext highlighter-rouge">link_libraries</code> command to link the TensorRT libraries to your target <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>link_libraries(${NVINFER_LIB} ${NVONNXPARSER_LIB} ${CUDA_LIBRARIES})
</code></pre></div> </div> </li> </ol> <p>The code block below is the complete CMake file.</p> <div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.11<span class="p">)</span>
<span class="nb">project</span><span class="p">(</span>trt_examples<span class="p">)</span>
<span class="nb">set</span><span class="p">(</span>CMAKE_CXX_STANDARD 14<span class="p">)</span>

<span class="c1"># CUDA</span>
<span class="nb">find_package</span><span class="p">(</span>CUDA REQUIRED<span class="p">)</span>
<span class="nb">include_directories</span><span class="p">(</span><span class="si">${</span><span class="nv">CUDA_INCLUDE_DIRS</span><span class="si">}</span><span class="p">)</span>
<span class="nb">message</span><span class="p">(</span><span class="s2">"CUDA_TOOLKIT_ROOT_DIR = </span><span class="si">${</span><span class="nv">CUDA_TOOLKIT_ROOT_DIR</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="nb">message</span><span class="p">(</span><span class="s2">"CUDA_INCLUDE_DIRS = </span><span class="si">${</span><span class="nv">CUDA_INCLUDE_DIRS</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="nb">message</span><span class="p">(</span><span class="s2">"CUDA_LIBRARIES = </span><span class="si">${</span><span class="nv">CUDA_LIBRARIES</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>

<span class="c1"># TensorRT</span>
<span class="nb">set</span><span class="p">(</span>TENSORRT_DIR  <span class="s2">"/home/gluo/local_lib/TensorRT-8.6.1.6/"</span><span class="p">)</span>
<span class="nb">find_library</span><span class="p">(</span>NVINFER_LIB libnvinfer.so PATHS <span class="si">${</span><span class="nv">TENSORRT_DIR</span><span class="si">}</span>/lib<span class="p">)</span>
<span class="nb">find_library</span><span class="p">(</span>NVONNXPARSER_LIB libnvonnxparser.so PATHS <span class="si">${</span><span class="nv">TENSORRT_DIR</span><span class="si">}</span>/lib<span class="p">)</span>

<span class="nb">include_directories</span><span class="p">(</span><span class="si">${</span><span class="nv">TENSORRT_DIR</span><span class="si">}</span>/include<span class="p">)</span>
<span class="nb">link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">NVINFER_LIB</span><span class="si">}</span> <span class="si">${</span><span class="nv">NVONNXPARSER_LIB</span><span class="si">}</span> <span class="si">${</span><span class="nv">CUDA_LIBRARIES</span><span class="si">}</span><span class="p">)</span>

<span class="nb">add_executable</span><span class="p">(</span>example1 example1.cpp<span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="c++"/><summary type="html"><![CDATA[I downloaded the tar file for TensorRT local installation and unpack it into a local folder. I want to use the dynamic libraries in it such as libnvinfer.so when compiling my project with CMake. How shoud I configurate it in the CMakeLists.txt.]]></summary></entry><entry><title type="html">Learn C++ 1: Initializing Objects with Functions</title><link href="https://ggluo.github.io/2023/02/07/learn-c-1.html" rel="alternate" type="text/html" title="Learn C++ 1: Initializing Objects with Functions"/><published>2023-02-07T12:55:00+00:00</published><updated>2023-02-07T12:55:00+00:00</updated><id>https://ggluo.github.io/2023/02/07/learn-c-1</id><content type="html" xml:base="https://ggluo.github.io/2023/02/07/learn-c-1.html"><![CDATA[<p>As a newbie to C++, I came across many challenges when working on a project with this versatile language. Learn by doing, these blogs (Learn C++) are the record of practical examples I collected.</p> <p>I was confused by the following line, when reading the implementation of <a href="https://github.com/NVIDIA/TensorRT/blob/c0c633cc629cc0705f0f69359f531a192e524c0f/samples/common/logger.cpp#L30"><code class="language-plaintext highlighter-rouge">logger</code></a> in TensorRT examples.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LogStreamConsumer</span> <span class="n">gLogFatal</span><span class="p">{</span><span class="n">LOG_FATAL</span><span class="p">(</span><span class="n">gLogger</span><span class="p">)};</span>
</code></pre></div></div> <ol> <li> <p><code class="language-plaintext highlighter-rouge">LogStreamConsumer</code> is a class used for handling log messages or streams.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">gLogFatal</code> is an instance of the <code class="language-plaintext highlighter-rouge">LogStreamConsumer</code> class. It is being initialized with the result of LOG_FATAL(<code class="language-plaintext highlighter-rouge">gLogger</code>).</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">LOG_FATAL</code> is a inline function customize the <code class="language-plaintext highlighter-rouge">gLogger</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">gLogger</code> is an instance of a Logger class or object.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">Initialization</code>: The <a href="https://www.geeksforgeeks.org/uniform-initialization-in-c/"><code class="language-plaintext highlighter-rouge">uniform initialization</code></a> syntax is used: <code class="language-plaintext highlighter-rouge">type var_name{arg1, arg2, ....arg n}</code></p> </li> </ol> <p>The gLogFatal object is being initialized with the result of calling LOG_FATAL with gLogger as an argument. This suggests that LOG_FATAL is constructing a LogStreamConsumer object, possibly based on the severity level of gLogger.</p>]]></content><author><name></name></author><category term="c++"/><summary type="html"><![CDATA[As a newbie to C++, I came across many challenges when working on a project with this versatile language. Learn by doing, these blogs (Learn C++) are the record of practical examples I collected.]]></summary></entry><entry><title type="html">How to Call C++ Class from C</title><link href="https://ggluo.github.io/2023/01/27/how-to-call-cpp-class-from-c.html" rel="alternate" type="text/html" title="How to Call C++ Class from C"/><published>2023-01-27T09:54:00+00:00</published><updated>2023-01-27T09:54:00+00:00</updated><id>https://ggluo.github.io/2023/01/27/how-to-call-cpp-class-from-c</id><content type="html" xml:base="https://ggluo.github.io/2023/01/27/how-to-call-cpp-class-from-c.html"><![CDATA[<p>Calling a C++ class from C can be a bit tricky because C does not support classes and objects like C++. However, you can still interact with C++ code from C by creating a C interface for your C++ class. In this example, we define a C++ class MyClass with a method doSomething(). Then, we create a C wrapper MyClassWrapper that provides functions to create, manipulate, and destroy instances of MyClass. Finally, we can use these functions in a C program to interact with the MyClass object. See <a href="https://github.com/ggluo/Call-cpp-class-from-c">github</a>.</p> <h2 id="define-a-c-class">Define a C++ class</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef MYCLASS_H
#define MYCLASS_H
</span>
<span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">MyClass</span><span class="p">();</span>
    <span class="kt">void</span> <span class="n">doSomething</span><span class="p">();</span>
<span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
<span class="p">};</span>
<span class="cp">#endif // MYCLASS_H
</span></code></pre></div></div> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"MyClass.h"</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="n">MyClass</span><span class="o">::</span><span class="n">MyClass</span><span class="p">()</span> <span class="o">:</span> <span class="n">data</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

<span class="kt">void</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Doing something in MyClass"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="define-a-c-wrapper">Define a C wrapper</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MyClassWrapper.h</span>
<span class="cp">#ifndef MYCLASSWRAPPER_H
#define MYCLASSWRAPPER_H
</span>
<span class="cp">#ifdef __cplusplus
</span><span class="k">extern</span> <span class="s">"C"</span> <span class="p">{</span>
<span class="cp">#endif
</span>
<span class="k">typedef</span> <span class="kt">void</span><span class="o">*</span> <span class="n">MyClassHandle</span><span class="p">;</span>

<span class="n">MyClassHandle</span> <span class="n">createMyClass</span><span class="p">();</span>
<span class="kt">void</span> <span class="n">destroyMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">);</span>
<span class="kt">void</span> <span class="n">doSomethingInMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">);</span>

<span class="cp">#ifdef __cplusplus
</span><span class="p">}</span>
<span class="cp">#endif
</span>
<span class="cp">#endif // MYCLASSWRAPPER_H
</span>
</code></pre></div></div> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"MyClassWrapper.h"</span><span class="cp">
#include</span> <span class="cpf">"MyClass.h"</span><span class="cp">
</span>
<span class="k">extern</span> <span class="s">"C"</span> <span class="p">{</span>

<span class="n">MyClassHandle</span> <span class="n">createMyClass</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">MyClassHandle</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">MyClass</span><span class="p">());</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">destroyMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">delete</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">MyClass</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">doSomethingInMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">MyClass</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">doSomething</span><span class="p">();</span>
<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="use-the-wrapper-in-c">Use the wrapper in C</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"MyClassWrapper.h"</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">MyClassHandle</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">createMyClass</span><span class="p">();</span>
    <span class="n">doSomethingInMyClass</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
    <span class="n">destroyMyClass</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="c++"/><summary type="html"><![CDATA[Calling a C++ class from C can be a bit tricky because C does not support classes and objects like C++. However, you can still interact with C++ code from C by creating a C interface for your C++ class. In this example, we define a C++ class MyClass with a method doSomething(). Then, we create a C wrapper MyClassWrapper that provides functions to create, manipulate, and destroy instances of MyClass. Finally, we can use these functions in a C program to interact with the MyClass object. See github.]]></summary></entry><entry><title type="html">Create a Table of Figures using Latex</title><link href="https://ggluo.github.io/2023/01/04/create-a-table-of-figure-using-latex.html" rel="alternate" type="text/html" title="Create a Table of Figures using Latex"/><published>2023-01-04T18:19:00+00:00</published><updated>2023-01-04T18:19:00+00:00</updated><id>https://ggluo.github.io/2023/01/04/create-a-table-of-figure-using-latex</id><content type="html" xml:base="https://ggluo.github.io/2023/01/04/create-a-table-of-figure-using-latex.html"><![CDATA[<p>Go to this <a href="https://github.com/ggluo/figure-templates">repository</a> and find tex files for the figure below</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 1000px)" srcset="/assets/img/fig-crop-1000.webp"/> <source class="responsive-img-srcset" media="(max-width: 1200px)" srcset="/assets/img/fig-crop-1200.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/fig-crop-1400.webp"/> <img src="/assets/img/fig-crop.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Table of figures" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div>]]></content><author><name></name></author><category term="latex"/><summary type="html"><![CDATA[Go to this repository and find tex files for the figure below]]></summary></entry></feed>