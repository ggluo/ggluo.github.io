<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ggluo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ggluo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-27T13:26:31+00:00</updated><id>https://ggluo.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Learn C++ 1: Initializing Objects with Functions</title><link href="https://ggluo.github.io/2023/02/07/learn-c-1.html" rel="alternate" type="text/html" title="Learn C++ 1: Initializing Objects with Functions"/><published>2023-02-07T12:55:00+00:00</published><updated>2023-02-07T12:55:00+00:00</updated><id>https://ggluo.github.io/2023/02/07/learn-c-1</id><content type="html" xml:base="https://ggluo.github.io/2023/02/07/learn-c-1.html"><![CDATA[<p>As a newbie to C++, I came across many challenges when working on a project using this versatile language. Learn by doing, these blogs is the record of practical examples I collected.</p> <p>I was confused by the following line, when reading the implementation of <a href="https://github.com/NVIDIA/TensorRT/blob/c0c633cc629cc0705f0f69359f531a192e524c0f/samples/common/logger.cpp#L30"><code class="language-plaintext highlighter-rouge">logger</code></a> in TensorRT samples.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LogStreamConsumer</span> <span class="n">gLogFatal</span><span class="p">{</span><span class="n">LOG_FATAL</span><span class="p">(</span><span class="n">gLogger</span><span class="p">)};</span>
</code></pre></div></div> <ol> <li> <p><code class="language-plaintext highlighter-rouge">LogStreamConsumer</code> is a class used for handling log messages or streams.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">gLogFatal</code> is an instance of the <code class="language-plaintext highlighter-rouge">LogStreamConsumer</code> class. It is being initialized with the result of LOG_FATAL(<code class="language-plaintext highlighter-rouge">gLogger</code>).</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">LOG_FATAL</code> is a inline function customize the <code class="language-plaintext highlighter-rouge">gLogger</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">gLogger</code> is an instance of a Logger class or object.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">Initialization</code>: The <a href="https://www.geeksforgeeks.org/uniform-initialization-in-c/"><code class="language-plaintext highlighter-rouge">uniform initialization</code></a> syntax is used: <code class="language-plaintext highlighter-rouge">type var_name{arg1, arg2, ....arg n}</code></p> </li> </ol> <p>The gLogFatal object is being initialized with the result of calling LOG_FATAL with gLogger as an argument. This suggests that LOG_FATAL is constructing a LogStreamConsumer object, possibly based on the severity level of gLogger.</p>]]></content><author><name></name></author><category term="c++"/><summary type="html"><![CDATA[As a newbie to C++, I came across many challenges when working on a project using this versatile language. Learn by doing, these blogs is the record of practical examples I collected.]]></summary></entry><entry><title type="html">How to call cpp class from c</title><link href="https://ggluo.github.io/2023/01/27/how-to-call-cpp-class-from-c.html" rel="alternate" type="text/html" title="How to call cpp class from c"/><published>2023-01-27T09:54:00+00:00</published><updated>2023-01-27T09:54:00+00:00</updated><id>https://ggluo.github.io/2023/01/27/how-to-call-cpp-class-from-c</id><content type="html" xml:base="https://ggluo.github.io/2023/01/27/how-to-call-cpp-class-from-c.html"><![CDATA[<p>Calling a C++ class from C can be a bit tricky because C does not support classes and objects like C++. However, you can still interact with C++ code from C by creating a C interface for your C++ class. In this example, we define a C++ class MyClass with a method doSomething(). Then, we create a C wrapper MyClassWrapper that provides functions to create, manipulate, and destroy instances of MyClass. Finally, we can use these functions in a C program to interact with the MyClass object. See <a href="https://github.com/ggluo/Call-cpp-class-from-c">github</a>.</p> <h2 id="define-a-c-class">Define a C++ class</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef MYCLASS_H
#define MYCLASS_H
</span>
<span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">MyClass</span><span class="p">();</span>
    <span class="kt">void</span> <span class="n">doSomething</span><span class="p">();</span>
<span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
<span class="p">};</span>
<span class="cp">#endif // MYCLASS_H
</span></code></pre></div></div> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"MyClass.h"</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="n">MyClass</span><span class="o">::</span><span class="n">MyClass</span><span class="p">()</span> <span class="o">:</span> <span class="n">data</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

<span class="kt">void</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Doing something in MyClass"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="define-a-c-wrapper">Define a C wrapper</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MyClassWrapper.h</span>
<span class="cp">#ifndef MYCLASSWRAPPER_H
#define MYCLASSWRAPPER_H
</span>
<span class="cp">#ifdef __cplusplus
</span><span class="k">extern</span> <span class="s">"C"</span> <span class="p">{</span>
<span class="cp">#endif
</span>
<span class="k">typedef</span> <span class="kt">void</span><span class="o">*</span> <span class="n">MyClassHandle</span><span class="p">;</span>

<span class="n">MyClassHandle</span> <span class="n">createMyClass</span><span class="p">();</span>
<span class="kt">void</span> <span class="n">destroyMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">);</span>
<span class="kt">void</span> <span class="n">doSomethingInMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">);</span>

<span class="cp">#ifdef __cplusplus
</span><span class="p">}</span>
<span class="cp">#endif
</span>
<span class="cp">#endif // MYCLASSWRAPPER_H
</span>
</code></pre></div></div> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"MyClassWrapper.h"</span><span class="cp">
#include</span> <span class="cpf">"MyClass.h"</span><span class="cp">
</span>
<span class="k">extern</span> <span class="s">"C"</span> <span class="p">{</span>

<span class="n">MyClassHandle</span> <span class="n">createMyClass</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">MyClassHandle</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">MyClass</span><span class="p">());</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">destroyMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">delete</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">MyClass</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">doSomethingInMyClass</span><span class="p">(</span><span class="n">MyClassHandle</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">MyClass</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">doSomething</span><span class="p">();</span>
<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <h2 id="use-the-wrapper-in-c">Use the wrapper in C</h2> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"MyClassWrapper.h"</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">MyClassHandle</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">createMyClass</span><span class="p">();</span>
    <span class="n">doSomethingInMyClass</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
    <span class="n">destroyMyClass</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="c++"/><summary type="html"><![CDATA[Calling a C++ class from C can be a bit tricky because C does not support classes and objects like C++. However, you can still interact with C++ code from C by creating a C interface for your C++ class. In this example, we define a C++ class MyClass with a method doSomething(). Then, we create a C wrapper MyClassWrapper that provides functions to create, manipulate, and destroy instances of MyClass. Finally, we can use these functions in a C program to interact with the MyClass object. See github.]]></summary></entry></feed>